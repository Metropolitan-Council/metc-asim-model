Description,Target,Expression
age_0_to_5,age_0_to_5,"persons.age < 5"
age_6_to_12,age_6_to_12,"persons.age.between(6,12)"
age_16_to_19,age_16_to_19,"persons.age.between(16,19)"
age_16_p,age_16_p,"persons.age >= 16"
adult,adult,"persons.age >= 18"
male,male,persons.SEX == 1
female,female,persons.SEX == 2
age,age,persons.age
employment status type,pemploy,np.zeros(len(persons))
,esr,np.zeros(len(persons))
,wkhp,np.zeros(len(persons))
,wkw,np.zeros(len(persons))
,schg,np.zeros(len(persons))
# Setting ESR from emp type - if 1 or 2 then worker, else unemployed
,esr,"np.where(persons.emp_type<3,1,3)"
# Setting wkhp (work hours per week) based on emp type - ft (40 hours per week) or pt (20 hours per week)
,wkhp,"np.where(persons.emp_type==1,40,np.where(persons.emp_type==2,20,0))"
# Setting weeks worked per month to 4 for all workers
,wkw,"np.where(persons.emp_type==1,4,np.where(persons.emp_type==2,4,0))"
# Setting school grade based on age for students
,schg,"np.where(persons.stud_stat==0,0,np.where(persons.age<6,1,np.where(persons.age<=18,12,16)))"
,pemploy,"np.where(persons.age < 16, PEMPLOY_CHILD, PEMPLOY_PART)"
,pemploy,"np.where((persons.age >= 16) & ((esr == 3) | (esr == 6)), PEMPLOY_NOT, pemploy)"
,pemploy,"np.where((persons.age >= 16) & ((esr != 3) & (esr != 6)) & (wkhp >= 35) & (wkw >= 1) & (wkw <= 4), PEMPLOY_FULL, pemploy)"
student category,pstudent,np.zeros(len(persons))
,pstudent,"np.where((pemploy == 1) & (persons.age >= 16), PSTUDENT_NOT, pstudent)"
,pstudent,"np.where((pemploy == 1) & (persons.age < 16), PSTUDENT_GRADE_OR_HIGH, pstudent)"
,pstudent,"np.where((schg < 1) & (persons.age >= 16), PSTUDENT_NOT, pstudent)"
,pstudent,"np.where((schg < 1) & (persons.age < 16), PSTUDENT_GRADE_OR_HIGH, pstudent)"
,pstudent,"np.where((schg >= 15) & (persons.age >= 16) & (pemploy != 1), PSTUDENT_UNIVERSITY, pstudent)"
,pstudent,"np.where((schg >= 15) & (persons.age < 16) & (pemploy != 1), PSTUDENT_GRADE_OR_HIGH, pstudent)"
,pstudent,"np.where((persons.age <= 19) & (pemploy != 1) & (schg >=1) & (schg<=14), PSTUDENT_GRADE_OR_HIGH, pstudent)"
,pstudent,"np.where((persons.age > 19) & (pemploy != 1) & (schg >=1) & (schg<=14),  PSTUDENT_UNIVERSITY, pstudent)"
,pstudent,"np.where(pstudent == 0, 3, pstudent)"
person type,ptype,np.zeros(len(persons))
,ptype,"np.where((pemploy == 1),  PTYPE_FULL, PTYPE_NONWORK)"
,ptype,"np.where((pstudent == 3) & (pemploy == 2), PTYPE_PART, ptype)"
,ptype,"np.where((pstudent == 3) & (persons['age'] >= 65) & ((pemploy == 3) | (pemploy == 4)), PTYPE_RETIRED, ptype)"
,ptype,"np.where((pstudent == 3) & (persons['age'] < 6) & ((pemploy == 3) | (pemploy == 4)), PTYPE_PRESCHOOL, ptype)"
,ptype,"np.where((pstudent == 3) & (persons['age'] >= 6) & (persons['age'] <= 64) & ((pemploy == 3) | (pemploy == 4)), PTYPE_NONWORK, ptype)"
,ptype,"np.where((pstudent == 2)  & ((pemploy == 2)  | (pemploy == 3) | (pemploy == 4)), PTYPE_UNIVERSITY, ptype)"
,ptype,"np.where((pstudent == 1) & (persons['age'] < 6)  & ((pemploy == 2)  | (pemploy == 3) | (pemploy == 4)), PTYPE_PRESCHOOL, ptype)"
,ptype,"np.where((pstudent == 1) & (persons['age'] >= 16)  & ((pemploy == 2)  | (pemploy == 3) | (pemploy == 4)), PTYPE_DRIVING, ptype)"
,ptype,"np.where((pstudent == 1) & (persons['age'] >= 6) & (persons['age'] < 16)  & ((pemploy == 2)  | (pemploy == 3) | (pemploy == 4)), PTYPE_SCHOOL, ptype)"
presence of non_worker other than self in household,has_non_worker,"other_than(persons.household_id, ptype == PTYPE_NONWORK)"
,pstudent,"np.where((ptype == PTYPE_PRESCHOOL) & (~has_non_worker), 1, pstudent)"
presence of retiree other than self in household,has_retiree,"other_than(persons.household_id, ptype == PTYPE_RETIRED)"
presence of preschooler other than self in household,has_preschool_kid,"other_than(persons.household_id, ptype == PTYPE_PRESCHOOL)"
presence of driving_kid other than self in household,has_driving_kid,"other_than(persons.household_id, ptype == PTYPE_DRIVING)"
presence of school_kid other than self in household,has_school_kid,"other_than(persons.household_id, ptype == PTYPE_SCHOOL)"
presence of full_time worker other than self in household (independent of person type),has_full_time,"other_than(persons.household_id, pemploy==PEMPLOY_FULL)"
presence of part_time worker other than self in household (independent of person type),has_part_time,"other_than(persons.household_id, pemploy==PEMPLOY_PART)"
presence of university student other than self in household,has_university,"other_than(persons.household_id, ptype == PTYPE_UNIVERSITY)"
student_is_employed,student_is_employed,"np.where(((ptype == PTYPE_UNIVERSITY) | (ptype == PTYPE_DRIVING)) & ((pemploy == PEMPLOY_FULL) | (pemploy == PEMPLOY_PART)), True, False)"
Univ ptype,pstudent,"np.where(ptype == PTYPE_UNIVERSITY, 2, pstudent)"
nonstudent_to_school,nonstudent_to_school,"np.where(((ptype ==  PTYPE_FULL) | (ptype ==   PTYPE_PART) | (ptype ==  PTYPE_NONWORK) | (ptype ==  PTYPE_RETIRED))  & ((pstudent == PSTUDENT_GRADE_OR_HIGH) | (pstudent ==  PSTUDENT_UNIVERSITY)), True, False)"
is_student,is_student,"np.where((pstudent == PSTUDENT_GRADE_OR_HIGH) | (pstudent == PSTUDENT_UNIVERSITY), True, False)"
is_gradeschool,is_gradeschool,(pstudent == PSTUDENT_GRADE_OR_HIGH) & (age <= GRADE_SCHOOL_MAX_AGE)
is_highschool,is_highschool,(pstudent == PSTUDENT_GRADE_OR_HIGH) & (age > GRADE_SCHOOL_MAX_AGE)
is_university,is_university,(pstudent == PSTUDENT_UNIVERSITY) | (ptype == PTYPE_UNIVERSITY)
school_segment gradeschool,school_segment,"np.where(is_gradeschool, SCHOOL_SEGMENT_GRADE, SCHOOL_SEGMENT_NONE)"
# school_segment highschool,school_segment,"np.where(is_highschool, SCHOOL_SEGMENT_HIGH, school_segment)"
#school_segment adult,school_segment,"np.where((is_student) & ((~is_highschool) & (~is_gradeschool) & (~is_university) & (school_segment == 0)), SCHOOL_SEGMENT_UNIV, school_segment)"
#is_university adult,is_university,"(ptype == PTYPE_UNIVERSITY) & (is_student)"
school_segment university,school_segment,"np.where(pstudent == PSTUDENT_UNIVERSITY, SCHOOL_SEGMENT_UNIV , school_segment).astype(np.int8)"
#
is_worker,is_worker,"np.where((pemploy == PEMPLOY_FULL) |( pemploy == PEMPLOY_PART), True, False)"
student_is_employed,student_is_employed,"np.where((is_student) & (is_worker), True, False)"
#,,
###hh_child,hh_child,"reindex(households.children, persons.household_id)"
person number,PNUM,persons.pnum
#income,income,"reindex(households.HINCP, persons.household_id)"
#income_in_thousands,income_in_thousands,(income / 1000).clip(lower=0)
#income_segment,income_segment,"pd.cut(income_in_thousands, bins=[-np.inf, 30, 60, 100, np.inf], labels=[1, 2, 3, 4]).astype(int)"
#is_fulltime_worker,is_fulltime_worker,"((age_16_p) & (wkhp >=35) & (wkw>=1) & (wkw<=4) & (~esr.isin([3,6])))"
#is_parttime_worker,is_parttime_worker,"((age_16_p) & (~esr.isin([3,6])) & (is_fulltime_worker == False))"
is_fulltime_worker,is_fulltime_worker,"ptype == PTYPE_FULL"
is_parttime_worker,is_parttime_worker,"ptype == PTYPE_PART"
,_mean_work,distributed_time_factor_work_mean
,_stddev_work,distributed_time_factor_work_stddev
,_mean_nonwork,distributed_time_factor_nonwork_mean
,_stddev_nonwork,distributed_time_factor_nonwork_stddev
,_min_time_factor,distributed_time_factor_min
,_max_time_factor,distributed_time_factor_max
#,,"Below expression was previously done using np.clip, but was producing a NotImplemented error for mixed DataFrame and Series Inputs.  Reimplemented using min & max"
travel time sensitivity factor for work travel,time_factor_work,"np.minimum(_max_time_factor, np.maximum(rng.lognormal_for_df(persons, mu=_mean_work, sigma=_stddev_work, scale=True), _min_time_factor))"
travel time sensitivity factor for non-work travel,time_factor_nonwork,"np.minimum(_max_time_factor, np.maximum(rng.lognormal_for_df(persons, mu=_mean_nonwork, sigma=_stddev_nonwork, scale=True), _min_time_factor))"