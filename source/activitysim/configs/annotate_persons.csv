Description,Target,Expression
# Fix the person types
#person type,ptype,"np.where(persons.PTYPE==1,8,np.where(persons.PTYPE==2,7,np.where(persons.PTYPE==3,6,np.where(persons.PTYPE==4,3,np.where(persons.PTYPE==5,1,np.where(persons.PTYPE==6,2,np.where(persons.PTYPE==7,4,5)))))))"
#person type fix,ptype,"np.where((ptype == 2) & (persons.SchStatus == 1),3,ptype)"
#,, annotate persons table after import
age_0_to_5,age_0_to_5,"persons.age < 5"
age_6_to_12,age_6_to_12,"persons.age.between(6,12)"
age_16_to_19,age_16_to_19,"persons.age.between(16,19)"
age_16_p,age_16_p,"persons.age >= 16"
adult,adult,"persons.age >= 18"
male,male,persons.SEX == 1
female,female,persons.SEX == 2
age,age,persons.age
#,esr,persons.ESR.fillna(0)
#,wkhp,persons.WKHP.fillna(0)
#,wkw,persons.WKW.fillna(0)
#,schg,persons.SCHG.fillna(0)
#,mil,persons.MIL.fillna(0)
employment status type,pemploy,persons.emp_type
#,pemploy,"np.where(persons.age < 16, PEMPLOY_CHILD, PEMPLOY_PART)"
#,pemploy,"np.where((persons['age'] >= 16) & ((esr == 3) | (esr == 6)), PEMPLOY_NOT, pemploy)"
#,pemploy,"np.where((persons['age'] >= 16) & (pemploy == 1),PEMPLOY_FULL, pemploy)"
#,pemploy,"np.where((persons.age>=16)&((esr != 3)&(esr != 6))&(wkhp >= 35) & (wkw >= 1) & (wkw <= 4), PEMPLOY_FULL, pemploy)"
#person type,ptype,persons.ptype 
student category,pstudent,np.zeros(len(persons))
,pstudent,"np.where((persons.stud_stat == 0) & (persons.age > 18), PSTUDENT_NOT, pstudent)"
,pstudent,"np.where((persons.stud_stat == 1) & (persons.age > 18), PSTUDENT_UNIVERSITY, pstudent)"
#,pstudent,"np.where(ptype == 4, PSTUDENT_UNIVERSITY, pstudent)"
#,pstudent,"np.where((pemploy == 1) & (persons.age < 4), PSTUDENT_GRADE_OR_HIGH, pstudent)"
#,pstudent,"np.where((schg < 1) & (persons.age >= 4), PSTUDENT_NOT, pstudent)"
,pstudent,"np.where((persons.stud_stat == 1) & (persons.age <= 18), PSTUDENT_GRADE_OR_HIGH, pstudent)"
,pstudent,"np.where((persons.stud_stat == 1) & (persons.age > 18) & (pemploy != 1), PSTUDENT_UNIVERSITY, pstudent)"
#,pstudent,"np.where((schg >= 15) & (persons.age < 4) & (pemploy != 1), PSTUDENT_GRADE_OR_HIGH, pstudent)"
#,pstudent,"np.where((persons.age <= 5) & (pemploy != 1) & (stud_stat ==1) & (schg<=14), PSTUDENT_GRADE_OR_HIGH, pstudent)"
#,pstudent,"np.where((persons.age > 5) & (pemploy != 1) & (schg >=1) & (schg<=14),  PSTUDENT_UNIVERSITY, pstudent)"
,pstudent,"np.where(pstudent == 0, PSTUDENT_NOT, pstudent)"
,ptype,4
,ptype,"np.where((pemploy == PEMPLOY_FULL),  PTYPE_FULL, PTYPE_NONWORK)"
,ptype,"np.where((pstudent == PSTUDENT_NOT) & (pemploy == PEMPLOY_PART), PTYPE_PART, ptype)"
,ptype,"np.where((pstudent == PSTUDENT_NOT) & (persons['age'] >= 65) & ((pemploy == PEMPLOY_NOT) | (pemploy == PEMPLOY_CHILD)), PTYPE_RETIRED, ptype)"
,ptype,"np.where((pstudent == PSTUDENT_NOT) & (persons['age'] < 6) & ((pemploy == PEMPLOY_NOT) | (pemploy == PEMPLOY_CHILD)), PTYPE_PRESCHOOL, ptype)"
,ptype,"np.where((pstudent == PSTUDENT_NOT) & (persons['age'] >= 6) & (persons['age'] <= 64) & ((pemploy == PEMPLOY_NOT)), PTYPE_NONWORK, ptype)"
,ptype,"np.where((pstudent == PSTUDENT_UNIVERSITY)  & ((pemploy == PEMPLOY_PART)  | (pemploy == PEMPLOY_NOT) | (pemploy == PEMPLOY_FULL)), PTYPE_UNIVERSITY, ptype)"
,ptype,"np.where((pstudent == PSTUDENT_GRADE_OR_HIGH) & (persons['age'] < 6)  & ((pemploy == PEMPLOY_NOT) | (pemploy == PEMPLOY_CHILD)), PTYPE_PRESCHOOL, ptype)"
,ptype,"np.where((pstudent == PSTUDENT_GRADE_OR_HIGH) & (persons['age'] >= GRADE_SCHOOL_MAX_AGE)  & ((pemploy == PEMPLOY_PART)  | (pemploy == PEMPLOY_NOT) | (pemploy == PEMPLOY_CHILD)), PTYPE_DRIVING, ptype)"
,ptype,"np.where((pstudent == PSTUDENT_GRADE_OR_HIGH) & (persons['age'] >= GRADE_SCHOOL_MAX_AGE) & (persons['age'] < 18)  & ((pemploy == PEMPLOY_PART)  | (pemploy == PEMPLOY_NOT) | (pemploy == PEMPLOY_CHILD)), PTYPE_SCHOOL, ptype)"
presence of non_worker other than self in household,has_non_worker,"other_than(persons.household_id, ptype == PTYPE_NONWORK)"
,pstudent,"np.where((ptype == PTYPE_PRESCHOOL) & (~has_non_worker), 1, pstudent)"
presence of retiree other than self in household,has_retiree,"other_than(persons.household_id, ptype == PTYPE_RETIRED)"
presence of preschooler other than self in household,has_preschool_kid,"other_than(persons.household_id, ptype == PTYPE_PRESCHOOL)"
presence of driving_kid other than self in household,has_driving_kid,"other_than(persons.household_id, ptype == PTYPE_DRIVING)"
presence of school_kid other than self in household,has_school_kid,"other_than(persons.household_id, ptype == PTYPE_SCHOOL)"
presence of full_time worker other than self in household (independent of person type),has_full_time,"other_than(persons.household_id, pemploy==PEMPLOY_FULL)"
presence of part_time worker other than self in household (independent of person type),has_part_time,"other_than(persons.household_id, pemploy==PEMPLOY_PART)"
presence of university student other than self in household,has_university,"other_than(persons.household_id, ptype == PTYPE_UNIVERSITY)"
student_is_employed,student_is_employed,"np.where(((ptype == PTYPE_UNIVERSITY) | (ptype == PTYPE_DRIVING)) & ((pemploy == PEMPLOY_FULL) | (pemploy == PEMPLOY_PART)), True, False)"
Univ ptype,pstudent,"np.where(ptype == PTYPE_UNIVERSITY, 2, pstudent)"
nonstudent_to_school,nonstudent_to_school,"np.where(((ptype ==  PTYPE_FULL) | (ptype ==   PTYPE_PART) | (ptype ==  PTYPE_NONWORK) | (ptype ==  PTYPE_RETIRED))  & ((pstudent == PSTUDENT_GRADE_OR_HIGH) | (pstudent ==  PSTUDENT_UNIVERSITY)), True, False)"
is_student,is_student,"np.where((pstudent == PSTUDENT_GRADE_OR_HIGH) | (pstudent == PSTUDENT_UNIVERSITY), True, False)"
is_gradeschool,is_gradeschool,(pstudent == PSTUDENT_GRADE_OR_HIGH) & (age <= GRADE_SCHOOL_MAX_AGE)
is_highschool,is_highschool,(pstudent == PSTUDENT_GRADE_OR_HIGH) & (age > GRADE_SCHOOL_MAX_AGE)
is_university,is_university,(pstudent == PSTUDENT_UNIVERSITY) | (ptype == PTYPE_UNIVERSITY)
school_segment gradeschool,school_segment,"np.where(is_gradeschool, SCHOOL_SEGMENT_GRADE, SCHOOL_SEGMENT_NONE)"
school_segment highschool,school_segment,"np.where(is_highschool, SCHOOL_SEGMENT_HIGH, school_segment)"
school_segment university,school_segment,"np.where(pstudent == PSTUDENT_UNIVERSITY, SCHOOL_SEGMENT_UNIV , school_segment).astype(np.int8)"
#school_segment adult,school_segment,"np.where((is_student) & ((~is_highschool) & (~is_gradeschool) & (~is_university) & (school_segment == 0)), SCHOOL_SEGMENT_UNIV, school_segment)"
#is_university adult,is_university,"(ptype == PTYPE_UNIVERSITY) & (is_student)"
#,,
is_worker,is_worker,"np.where((pemploy == PEMPLOY_FULL) |( pemploy == PEMPLOY_PART), True, False)"
student_is_employed,student_is_employed,"np.where((is_student) & (is_worker), True, False)"
#,,
home_zone_id,home_zone_id,"reindex(households.home_zone_id, persons.household_id)"
###hh_child,hh_child,"reindex(households.children, persons.household_id)"
person number,PNUM,persons.pnum
#income,income,"reindex(households.HINCP, persons.household_id)"
#income_in_thousands,income_in_thousands,(income / 1000).clip(lower=0)
#income_segment,income_segment,"pd.cut(income_in_thousands, bins=[-np.inf, 30, 60, 100, np.inf], labels=[1, 2, 3, 4]).astype(int)"
#is_fulltime_worker,is_fulltime_worker,"((age_16_p) & (wkhp >=35) & (wkw>=1) & (wkw<=4) & (~esr.isin([3,6])))"
#is_parttime_worker,is_parttime_worker,"((age_16_p) & (~esr.isin([3,6])) & (is_fulltime_worker == False))"
is_fulltime_worker,is_fulltime_worker,"ptype == PTYPE_FULL"
is_parttime_worker,is_parttime_worker,"ptype == PTYPE_PART"
,_mean_work,distributed_time_factor_work_mean
,_stddev_work,distributed_time_factor_work_stddev
,_mean_nonwork,distributed_time_factor_nonwork_mean
,_stddev_nonwork,distributed_time_factor_nonwork_stddev
,_min_time_factor,distributed_time_factor_min
,_max_time_factor,distributed_time_factor_max
#,,"Below expression was previously done using np.clip, but was producing a NotImplemented error for mixed DataFrame and Series Inputs.  Reimplemented using min & max"
travel time sensitivity factor for work travel,time_factor_work,"np.minimum(_max_time_factor, np.maximum(rng.lognormal_for_df(persons, mu=_mean_work, sigma=_stddev_work, scale=True), _min_time_factor))"
travel time sensitivity factor for non-work travel,time_factor_nonwork,"np.minimum(_max_time_factor, np.maximum(rng.lognormal_for_df(persons, mu=_mean_nonwork, sigma=_stddev_nonwork, scale=True), _min_time_factor))"