Description,Target,Expression
#,,
local,_DF_IS_TOUR,'tour_type' in df.columns
,number_of_participants,df.number_of_participants if _DF_IS_TOUR else 1
,is_joint,(df.tour_category=='joint') if _DF_IS_TOUR else False
#,,
 local,_HAVE_PARENT_TOURS,'parent_tour_id' in df.columns
,_parent_tour_mode,"reindex(tours.tour_mode, df.parent_tour_id) if _HAVE_PARENT_TOURS else ''"
,work_tour_is_drive,_parent_tour_mode.isin(['DRIVEALONE'])
,work_tour_is_bike,_parent_tour_mode=='BIKE'
,work_tour_is_SOV,_parent_tour_mode.isin(['DRIVEALONE'])
,work_tour_has_auto,"_parent_tour_mode.isin(['DRIVEALONE', 'SHARED2', 'SHARED3'])"
#,,
,is_mandatory,(df.tour_category=='mandatory') if 'tour_category' in df.columns else False
,is_joint,(df.tour_category=='joint') if 'tour_category' in df.columns else False
,is_indiv,~is_joint
,is_atwork_subtour,(df.tour_category=='atwork') if 'tour_category' in df.columns else False
,is_escort,(df.tour_type == 'escort') if _DF_IS_TOUR else False
,is_school,(df.tour_type=='school') & (df.is_university==False) if _DF_IS_TOUR else False
,is_work,(df.tour_type == 'work') if _DF_IS_TOUR else False
#,,
#,c_cost,(0.60 * c_ivt) / df.value_of_time
#,,
# cost coef,,,
,_income_exponent,"np.where(is_work, 0.6, 0.5)"
,cost_sensitivity,"np.maximum(df.income,1000).pow(_income_exponent)"
,c_cost,coef_income / cost_sensitivity
# ivt coef,,,
,time_factor,"np.where(is_work, df.time_factor_work, df.time_factor_nonwork)"
,c_ivt,coef_ivt * time_factor
#Auto operating costs,,
,parent_tour_veh,"reindex(tours['selected_vehicle'], df['parent_tour_id']) if 'selected_vehicle' in df.columns else np.nan"
,sov_veh_option,"np.where(is_atwork_subtour, parent_tour_veh, df.get('vehicle_occup_1', np.nan)) if 'selected_vehicle' in df.columns else np.nan"
,sr2_veh_option,"np.where(is_atwork_subtour, parent_tour_veh, df.get('vehicle_occup_2', np.nan)) if 'selected_vehicle' in df.columns else np.nan"
,sr3p_veh_option,"np.where(is_atwork_subtour, parent_tour_veh, df.get('vehicle_occup_3.5', np.nan)) if 'selected_vehicle' in df.columns else np.nan"
,parent_tour_op_cost,"reindex(tours['selected_vehicle_op_cost'], df['parent_tour_id']) if 'selected_vehicle_op_cost' in df.columns else np.nan"
,sov_auto_op_cost,"df.vehicle_occ_1_op_cost if 'vehicle_occ_1_op_cost' in df.columns else np.nan"
,sov_auto_op_cost,"parent_tour_op_cost if 'selected_vehicle_op_cost' in df.columns else sov_auto_op_cost"
,sov_auto_op_cost,"np.where(sov_auto_op_cost.isna() | (pd.Series(sov_veh_option, df.index) == 'non_hh_veh'), costPerMile, sov_auto_op_cost)"
,sr2_auto_op_cost,"df.vehicle_occ_2_op_cost if 'vehicle_occ_2_op_cost' in df.columns else np.nan"
,sr2_auto_op_cost,"parent_tour_op_cost if 'selected_vehicle_op_cost' in df.columns else sr2_auto_op_cost"
,sr2_auto_op_cost,"np.where(sr2_auto_op_cost.isna() | (pd.Series(sr2_veh_option, df.index) == 'non_hh_veh'), costPerMile, sr2_auto_op_cost)"
,sr3p_auto_op_cost,"df.vehicle_occ_3p_op_cost  if 'vehicle_occ_3p_op_cost' in df.columns else np.nan"
,sr3p_auto_op_cost,"parent_tour_op_cost if 'selected_vehicle_op_cost' in df.columns else sr3p_auto_op_cost"
,sr3p_auto_op_cost,"np.where(sr3p_auto_op_cost.isna() | (pd.Series(sr3p_veh_option, df.index) == 'non_hh_veh'), costPerMile, sr3p_auto_op_cost)"
# ,sov_auto_op_cost,"reindex(vehicles.groupby('vehicle_type')['auto_operating_cost'].mean(), pd.Series(sov_veh_option, df.index)) if 'vehicle_occup_1' in df.columns and vehicles is not None else np.nan"
# ,sov_auto_op_cost,"np.where(sov_auto_op_cost.isna() | (pd.Series(sov_veh_option, df.index) == 'non_hh_veh'), costPerMile, sov_auto_op_cost)"
# ,s2_auto_op_cost,"reindex(vehicles.groupby('vehicle_type')['auto_operating_cost'].mean(), pd.Series(sr2_veh_option, df.index)) if 'vehicle_occup_2' in df.columns and vehicles is not None else np.nan"
# ,s2_auto_op_cost,"np.where(s2_auto_op_cost.isna() | (pd.Series(sr2_veh_option, df.index) == 'non_hh_veh'), costPerMile, s2_auto_op_cost)"
# ,s3_auto_op_cost,"reindex(vehicles.groupby('vehicle_type')['auto_operating_cost'].mean(), pd.Series(sr3p_veh_option, df.index)) if 'vehicle_occup_3.5' in df.columns and vehicles is not None else np.nan"
# ,s3_auto_op_cost,"np.where(s3_auto_op_cost.isna() | (pd.Series(sr3p_veh_option, df.index) == 'non_hh_veh'), costPerMile, s3_auto_op_cost)"
# ,sov_auto_op_cost,costPerMile
# ,s2_auto_op_cost,costPerMile
# ,s3_auto_op_cost,costPerMile
#,,,
,vot_da,c_ivt / c_cost * 0.6
,vot_s2,vot_da / cost_share_s2
,vot_s3,vot_da / cost_share_s3
,_vot_bin_da,"np.where(vot_da < vot_threshold_low, 1, np.where(vot_da < vot_threshold_med, 2, 3))"
,_vot_bin_s2,"np.where(vot_s2 < vot_threshold_low, 1, np.where(vot_s2 < vot_threshold_med, 2, 3))"
,_vot_bin_s3,"np.where(vot_s3 < vot_threshold_low, 1, np.where(vot_s3 < vot_threshold_med, 2, 3))"
#
,dest_topology,"1"  #"reindex(land_use.TOPOLOGY, df[dest_col_name])"
,terminal_time,"reindex(land_use.TERM_TIME, df[dest_col_name])"
,dest_density_index,"reindex(land_use.density_index, df[dest_col_name])"

# RIDEHAIL,,
,origin_density_measure,"(reindex(land_use.POPULATION, df[orig_col_name]) + reindex(land_use.TOT_EMP, df[orig_col_name])) / (reindex(land_use.AREA, df[orig_col_name]) / 640)"
,dest_density_measure,"(reindex(land_use.POPULATION, df[dest_col_name]) + reindex(land_use.TOT_EMP, df[dest_col_name])) / (reindex(land_use.AREA, df[dest_col_name]) / 640)"
,origin_density,"pd.cut(origin_density_measure, bins=[-np.inf, 500, 2000, 5000, 15000, np.inf], labels=[5, 4, 3, 2, 1]).astype(int)"
,dest_density,"pd.cut(dest_density_measure, bins=[-np.inf, 500, 2000, 5000, 15000, np.inf], labels=[5, 4, 3, 2, 1]).astype(int)"
,origin_zone_taxi_wait_time_mean,"origin_density.map({k: v for k, v in Taxi_waitTime_mean.items()})"
,origin_zone_taxi_wait_time_sd,"origin_density.map({k: v for k, v in Taxi_waitTime_sd.items()})"
,dest_zone_taxi_wait_time_mean,"dest_density.map({k: v for k, v in Taxi_waitTime_mean.items()})"
,dest_zone_taxi_wait_time_sd,"dest_density.map({k: v for k, v in Taxi_waitTime_sd.items()})"
# ,, Note that the mean and standard deviation are not the values for the distribution itself  but of the underlying normal distribution it is derived from
,origTaxiWaitTime,"rng.lognormal_for_df(df, mu=origin_zone_taxi_wait_time_mean, sigma=origin_zone_taxi_wait_time_sd, broadcast=True, scale=True).clip(min_waitTime, max_waitTime)"
,destTaxiWaitTime,"rng.lognormal_for_df(df, mu=dest_zone_taxi_wait_time_mean, sigma=dest_zone_taxi_wait_time_sd, broadcast=True, scale=True).clip(min_waitTime, max_waitTime)"
,origin_zone_singleTNC_wait_time_mean,"origin_density.map({k: v for k, v in TNC_single_waitTime_mean.items()})"
,origin_zone_singleTNC_wait_time_sd,"origin_density.map({k: v for k, v in TNC_single_waitTime_sd.items()})"
,dest_zone_singleTNC_wait_time_mean,"dest_density.map({k: v for k, v in TNC_single_waitTime_mean.items()})"
,dest_zone_singleTNC_wait_time_sd,"dest_density.map({k: v for k, v in TNC_single_waitTime_sd.items()})"
,origSingleTNCWaitTime,"rng.lognormal_for_df(df, mu=origin_zone_singleTNC_wait_time_mean, sigma=origin_zone_singleTNC_wait_time_sd, broadcast=True, scale=True).clip(min_waitTime, max_waitTime)"
,destSingleTNCWaitTime,"rng.lognormal_for_df(df, mu=dest_zone_singleTNC_wait_time_mean, sigma=dest_zone_singleTNC_wait_time_sd, broadcast=True, scale=True).clip(min_waitTime, max_waitTime)"
,origin_zone_sharedTNC_wait_time_mean,"origin_density.map({k: v for k, v in TNC_shared_waitTime_mean.items()})"
,origin_zone_sharedTNC_wait_time_sd,"origin_density.map({k: v for k, v in TNC_shared_waitTime_sd.items()})"
,dest_zone_sharedTNC_wait_time_mean,"dest_density.map({k: v for k, v in TNC_shared_waitTime_mean.items()})"
,dest_zone_sharedTNC_wait_time_sd,"dest_density.map({k: v for k, v in TNC_shared_waitTime_sd.items()})"
,origSharedTNCWaitTime,"rng.lognormal_for_df(df, mu=origin_zone_sharedTNC_wait_time_mean, sigma=origin_zone_sharedTNC_wait_time_sd, broadcast=True, scale=True).clip(min_waitTime, max_waitTime)"
,destSharedTNCWaitTime,"rng.lognormal_for_df(df, mu=dest_zone_sharedTNC_wait_time_mean, sigma=dest_zone_sharedTNC_wait_time_sd, broadcast=True, scale=True).clip(min_waitTime, max_waitTime)"
,totalWaitTaxi,origTaxiWaitTime + destTaxiWaitTime
,totalWaitSingleTNC,origSingleTNCWaitTime + destSingleTNCWaitTime
,totalWaitSharedTNC,origSharedTNCWaitTime + destSharedTNCWaitTime
#,,
,_free_parking_available,(is_work) & df.free_parking_at_work if _DF_IS_TOUR else False
,_park_cost,"np.where(is_work, reindex(land_use.PARK_COST, df[dest_col_name]) * 100.0, reindex(land_use.NONWRKPRK, df[dest_col_name])) * 100.0"
,daily_parking_cost,"np.where(_free_parking_available, 0.0, _park_cost)"
#,,
,distance,od_skims['DIST']
#,,
# Driving Modes,,,
#
,ownsTransponder,df.transponder_ownership if 'transponder_ownership' in df else 0
,da_dist_skims_out,"(np.where(ownsTransponder==1, odt_skims['SOV_DIST_L'], odt_skims['SOV_DIST_L']) * (_vot_bin_da == 1)) + (np.where(ownsTransponder==1, odt_skims['SOV_DIST_M'], odt_skims['SOV_DIST_M']) * (_vot_bin_da == 2)) + (np.where(ownsTransponder==1, odt_skims['SOV_DIST_H'], odt_skims['SOV_DIST_H']) * (_vot_bin_da == 3))"
,da_dist_skims_inb,"(np.where(ownsTransponder==1, dot_skims['SOV_DIST_L'], dot_skims['SOV_DIST_L']) * (_vot_bin_da == 1)) + (np.where(ownsTransponder==1, dot_skims['SOV_DIST_M'], dot_skims['SOV_DIST_M']) * (_vot_bin_da == 2)) + (np.where(ownsTransponder==1, dot_skims['SOV_DIST_H'], dot_skims['SOV_DIST_H']) * (_vot_bin_da == 3))"
,da_cost_skims_out,"1.0 * (np.where(ownsTransponder==1, odt_skims['SOV_P_TOLL_L'], odt_skims['SOV_N_TOLL_L']) * (_vot_bin_da == 1)) + (np.where(ownsTransponder==1, odt_skims['SOV_P_TOLL_M'], odt_skims['SOV_N_TOLL_M']) * (_vot_bin_da == 2)) + (np.where(ownsTransponder==1, odt_skims['SOV_P_TOLL_H'], odt_skims['SOV_N_TOLL_H']) * (_vot_bin_da == 3))"
,da_cost_skims_inb,"1.0 * (np.where(ownsTransponder==1, dot_skims['SOV_P_TOLL_L'], dot_skims['SOV_N_TOLL_L']) * (_vot_bin_da == 1)) + (np.where(ownsTransponder==1, dot_skims['SOV_P_TOLL_M'], dot_skims['SOV_N_TOLL_M']) * (_vot_bin_da == 2)) + (np.where(ownsTransponder==1, dot_skims['SOV_P_TOLL_H'], dot_skims['SOV_N_TOLL_H']) * (_vot_bin_da == 3))"
,da_time_skims_out,"(np.where(ownsTransponder==1, odt_skims['SOV_P_TIME_L'], odt_skims['SOV_N_TIME_L']) * (_vot_bin_da == 1)) + (np.where(ownsTransponder==1, odt_skims['SOV_P_TIME_M'], odt_skims['SOV_N_TIME_M']) * (_vot_bin_da == 2)) + (np.where(ownsTransponder==1, odt_skims['SOV_P_TIME_H'], odt_skims['SOV_N_TIME_H']) * (_vot_bin_da == 3))"
,da_time_skims_inb,"(np.where(ownsTransponder==1, dot_skims['SOV_P_TIME_L'], dot_skims['SOV_N_TIME_L']) * (_vot_bin_da == 1)) + (np.where(ownsTransponder==1, dot_skims['SOV_P_TIME_M'], dot_skims['SOV_N_TIME_M']) * (_vot_bin_da == 2)) + (np.where(ownsTransponder==1, dot_skims['SOV_P_TIME_H'], dot_skims['SOV_N_TIME_H']) * (_vot_bin_da == 3))"
,s2_dist_skims_out,(((odt_skims['HOV2_DIST_L']) * (_vot_bin_s2 == 1)) + ((odt_skims['HOV2_DIST_M']) * (_vot_bin_s2 == 2)) + ((odt_skims['HOV2_DIST_H']) * (_vot_bin_s2 == 3)))
,s2_dist_skims_inb,(((dot_skims['HOV2_DIST_L']) * (_vot_bin_s2 == 1)) + ((dot_skims['HOV2_DIST_M']) * (_vot_bin_s2 == 2)) + ((dot_skims['HOV2_DIST_H']) * (_vot_bin_s2 == 3)))
,s2_cost_skims_out,"1.0 * (np.where(ownsTransponder==1, odt_skims['HOV2_P_TOLL_L'], odt_skims['HOV2_N_TOLL_L']) * (_vot_bin_s2 == 1)) + (np.where(ownsTransponder==1, odt_skims['HOV2_P_TOLL_M'], odt_skims['HOV2_N_TOLL_M']) * (_vot_bin_s2 == 2)) + (np.where(ownsTransponder==1, odt_skims['HOV2_P_TOLL_H'], odt_skims['HOV2_N_TOLL_H']) * (_vot_bin_s2 == 3))"
,s2_cost_skims_inb,"1.0 * (np.where(ownsTransponder==1, dot_skims['HOV2_P_TOLL_L'], dot_skims['HOV2_N_TOLL_L']) * (_vot_bin_s2 == 1)) + (np.where(ownsTransponder==1, dot_skims['HOV2_P_TOLL_M'], dot_skims['HOV2_N_TOLL_M']) * (_vot_bin_s2 == 2)) + (np.where(ownsTransponder==1, dot_skims['HOV2_P_TOLL_H'], dot_skims['HOV2_N_TOLL_H']) * (_vot_bin_s2 == 3))"
,s2_time_skims_out,"(np.where(ownsTransponder==1, odt_skims['HOV2_P_TIME_L'], odt_skims['HOV2_N_TIME_L']) * (_vot_bin_s2 == 1)) + (np.where(ownsTransponder==1, odt_skims['HOV2_P_TIME_M'], odt_skims['HOV2_N_TIME_M']) * (_vot_bin_s2 == 2)) + (np.where(ownsTransponder==1, odt_skims['HOV2_P_TIME_H'], odt_skims['HOV2_N_TIME_H']) * (_vot_bin_s2 == 3))"
,s2_time_skims_inb,"(np.where(ownsTransponder==1, dot_skims['HOV2_P_TIME_L'], dot_skims['HOV2_N_TIME_L']) * (_vot_bin_s2 == 1)) + (np.where(ownsTransponder==1, dot_skims['HOV2_P_TIME_M'], dot_skims['HOV2_N_TIME_M']) * (_vot_bin_s2 == 2)) + (np.where(ownsTransponder==1, dot_skims['HOV2_P_TIME_H'], dot_skims['HOV2_N_TIME_H']) * (_vot_bin_s2 == 3))"
,s3_dist_skims_out,(((odt_skims['HOV3_DIST_L']) * (_vot_bin_s2 == 1)) + ((odt_skims['HOV3_DIST_M']) * (_vot_bin_s3 == 2)) + ((odt_skims['HOV3_DIST_H']) * (_vot_bin_s2 == 3)))
,s3_dist_skims_inb,(((dot_skims['HOV3_DIST_L']) * (_vot_bin_s3 == 1)) + ((dot_skims['HOV3_DIST_M']) * (_vot_bin_s3 == 2)) + ((dot_skims['HOV3_DIST_H']) * (_vot_bin_s3 == 3)))
,s3_cost_skims_out,"1.0 * (np.where(ownsTransponder==1, odt_skims['HOV3_P_TOLL_L'], odt_skims['HOV3_N_TOLL_L']) * (_vot_bin_s3 == 1)) + (np.where(ownsTransponder==1, odt_skims['HOV3_P_TOLL_M'], odt_skims['HOV3_N_TOLL_M']) * (_vot_bin_s3 == 2)) + (np.where(ownsTransponder==1, odt_skims['HOV3_P_TOLL_H'], odt_skims['HOV3_N_TOLL_H']) * (_vot_bin_s3 == 3))"
,s3_cost_skims_inb,"1.0 * (np.where(ownsTransponder==1, dot_skims['HOV3_P_TOLL_L'], dot_skims['HOV3_N_TOLL_L']) * (_vot_bin_s3 == 1)) + (np.where(ownsTransponder==1, dot_skims['HOV3_P_TOLL_M'], dot_skims['HOV3_N_TOLL_M']) * (_vot_bin_s3 == 2)) + (np.where(ownsTransponder==1, dot_skims['HOV3_P_TOLL_H'], dot_skims['HOV3_N_TOLL_H']) * (_vot_bin_s3 == 3))"
,s3_time_skims_out,"(np.where(ownsTransponder==1, odt_skims['HOV3_P_TIME_L'], odt_skims['HOV3_N_TIME_L']) * (_vot_bin_s3 == 1)) + (np.where(ownsTransponder==1, odt_skims['HOV3_P_TIME_M'], odt_skims['HOV3_N_TIME_M']) * (_vot_bin_s3 == 2)) + (np.where(ownsTransponder==1, odt_skims['HOV3_P_TIME_H'], odt_skims['HOV3_N_TIME_H']) * (_vot_bin_s3 == 3))"
,s3_time_skims_inb,"(np.where(ownsTransponder==1, dot_skims['HOV3_P_TIME_L'], dot_skims['HOV3_N_TIME_L']) * (_vot_bin_s3 == 1)) + (np.where(ownsTransponder==1, dot_skims['HOV3_P_TIME_M'], dot_skims['HOV3_N_TIME_M']) * (_vot_bin_s3 == 2)) + (np.where(ownsTransponder==1, dot_skims['HOV3_P_TIME_H'], dot_skims['HOV3_N_TIME_H']) * (_vot_bin_s3 == 3))"
,sov_available,"(odt_skims['SOV_N_TIME_M']>0) & (dot_skims['SOV_N_TIME_M']>0) & (df.age>=minimumAgeDA) * np.where(is_joint,0,1)"
,hov2_available,"(odt_skims['HOV2_N_TIME_M'] + dot_skims['HOV2_N_TIME_M'])>0"
,hov3_available,"(odt_skims['HOV3_N_TIME_M']>0) & (dot_skims['HOV3_N_TIME_M']>0)"
#
# Transit Modes
#
,_walk_bus_ivt_ob,odt_skims['IVT_Bus_WK']
,_walk_bus_ivt_ib,dot_skims['IVT_Bus_WK']
,walk_bus_ivt,_walk_bus_ivt_ob + _walk_bus_ivt_ib
,_walk_ltd_ivt_ob,odt_skims['IVT_LB_WK']
,_walk_ltd_ivt_ib,dot_skims['IVT_LB_WK']
,walk_ltd_ivt,_walk_ltd_ivt_ob + _walk_ltd_ivt_ib
,_walk_exp_ivt_ob,odt_skims['IVT_Exp_WK']
,_walk_exp_ivt_ib,dot_skims['IVT_Exp_WK']
,walk_exp_ivt,_walk_exp_ivt_ob + _walk_exp_ivt_ob
,_walk_lrt_ivt_ob,odt_skims['IVT_LRT_WK']
,_walk_lrt_ivt_ib,dot_skims['IVT_LRT_WK']
,walk_lrt_ivt,_walk_lrt_ivt_ob + _walk_lrt_ivt_ib
,_walk_crt_ivt_ob,odt_skims['IVT_CRT_WK']
,_walk_crt_ivt_ib,dot_skims['IVT_CRT_WK']
,walk_crt_ivt,_walk_crt_ivt_ob + _walk_crt_ivt_ib
,_walk_trn_ivt_ob,_walk_bus_ivt_ob + _walk_ltd_ivt_ob + _walk_exp_ivt_ob + _walk_crt_ivt_ob
,_walk_trn_ivt_ib,_walk_bus_ivt_ib + _walk_ltd_ivt_ib + _walk_exp_ivt_ib + _walk_crt_ivt_ib
,walk_trn_ivt,_walk_trn_ivt_ob + _walk_trn_ivt_ib
,walk_transit_available,(_walk_trn_ivt_ob > 0) & (_walk_trn_ivt_ib >0)
,walk_trn_wait_ob,odt_skims['WAIT1_WK']
,walk_trn_wait_ib,dot_skims['WAIT1_WK']
,_walk_xfr_wait_ob,odt_skims['WAIT2_WK']
,_walk_xfr_wait_ib,dot_skims['WAIT2_WK']
,walk_xfr_wait,_walk_xfr_wait_ob+_walk_xfr_wait_ib
,_walk_xfrs_ob,odt_skims['XFERS_WK']
,_walk_xfrs_ib,dot_skims['XFERS_WK']
,walk_xfrs,_walk_xfrs_ob+_walk_xfrs_ib
,_walk_access_time_ob,odt_skims['AWALKT_WK']
,_walk_access_time_ib,dot_skims['AWALKT_WK']
,walk_access_time,_walk_access_time_ib+_walk_access_time_ob
,_walk_egress_time_ob,0
,_walk_egress_time_ib,0
,walk_egress_time,_walk_egress_time_ib+_walk_egress_time_ob
,_walk_xfr_walk_time_ob,odt_skims['XWALKT_WK']
,_walk_xfr_walk_time_ib,dot_skims['XWALKT_WK']
,walk_xfr_walk_time,_walk_xfr_walk_time_ob+_walk_xfr_walk_time_ib
,_walk_fare_ob,odt_skims['FARE_WK'] + odt_skims['XBFARE_WK'] + odt_skims['CRTFare_WK'] 
,_walk_fare_ib,dot_skims['FARE_WK'] + odt_skims['XBFARE_WK'] + odt_skims['CRTFare_WK']
,walk_fare,_walk_fare_ob+_walk_fare_ib
,_drive_bus_ivt_ob,odt_skims['IVT_Bus_DR']
,_drive_bus_ivt_ib,dot_skims['IVT_Bus_DE']
,drive_bus_ivt,_drive_bus_ivt_ob + _drive_bus_ivt_ib
,_drive_ltd_ivt_ob,odt_skims['IVT_LB_DR']
,_drive_ltd_ivt_ib,dot_skims['IVT_LB_DE']
,drive_ltd_ivt,_drive_ltd_ivt_ob + _drive_ltd_ivt_ib
,_drive_exp_ivt_ob,odt_skims['IVT_Exp_DR']
,_drive_exp_ivt_ib,dot_skims['IVT_Exp_DE']
,drive_exp_ivt,_drive_exp_ivt_ob + _walk_exp_ivt_ob
,_drive_lrt_ivt_ob,odt_skims['IVT_LRT_DR']
,_drive_lrt_ivt_ib,dot_skims['IVT_LRT_DE']
,drive_lrt_ivt,_drive_lrt_ivt_ob + _drive_lrt_ivt_ib
,_drive_crt_ivt_ob,odt_skims['IVT_CRT_DR']
,_drive_crt_ivt_ib,dot_skims['IVT_CRT_DE']
,_drive_trn_ivt_ob,_drive_bus_ivt_ob + _drive_ltd_ivt_ob + _drive_exp_ivt_ob + _drive_lrt_ivt_ob + _drive_crt_ivt_ob 
,_drive_trn_ivt_ib,_drive_bus_ivt_ib + _drive_ltd_ivt_ib + _drive_exp_ivt_ib + _drive_lrt_ivt_ib + _drive_crt_ivt_ib
,drive_trn_ivt,_drive_trn_ivt_ob+_drive_trn_ivt_ib
,drive_transit_available,(_drive_trn_ivt_ob>0) & (_drive_trn_ivt_ib>0)
,drive_trn_wait_ob,odt_skims['WAIT1_DR']
,drive_trn_wait_ib,dot_skims['WAIT1_DE']
,_drive_xfr_wait_ob,odt_skims['WAIT2_DR']
,_drive_xfr_wait_ib,dot_skims['WAIT2_DE']
,drive_xfr_wait,_drive_xfr_wait_ob+_drive_xfr_wait_ib
,_drive_xfrs_ob,odt_skims['XFERS_DR']
,_drive_xfrs_ib,dot_skims['XFERS_DE']
,drive_xfrs,_drive_xfrs_ob+_drive_xfrs_ib
,_drive_access_time_ib,odt_skims['DR_ACCR_DR']
,_drive_access_time_ob,dot_skims['DR_ACCR_DR']
,drive_access_time,_walk_access_time_ib+_walk_access_time_ob
,_drive_egress_time_ib,odt_skims['AWALKT_DR']
,_drive_egress_time_ob,dot_skims['AWALKT_DE']
,drive_egress_time,_drive_egress_time_ib+_drive_egress_time_ob
,_drive_xfr_walk_time_ob,odt_skims['XWALKT_DR']
,_drive_xfr_walk_time_ib,dot_skims['XWALKT_DE']
,drive_xfr_walk_time,_drive_xfr_walk_time_ob+_drive_xfr_walk_time_ib
,_drive_fare_ob,odt_skims['FARE_DR'] + odt_skims['XBFARE_DR'] + odt_skims['CRTFare_DR'] 
,_drive_fare_ib,dot_skims['FARE_DE'] + dot_skims['XBFARE_DE'] + dot_skims['CRTFare_DE']
,drive_fare,_drive_fare_ob+_drive_fare_ib
,drive_access_dist,odt_skims['DR_ACCD_DR'] + dot_skims['DR_ACCD_DE']
,_has_persons,True if 'persons' in vars() or 'persons' in globals() else False
,_transit_pass,"reindex(persons.transit_pass_ownership, df.person_id) if _has_persons.any() and 'transit_pass_ownership' in persons.columns else 0"
# ,_transit_pass,0.0
,transit_pass_mult,(1-_transit_pass)
#,walk_premium_available,"walk_transit_available & (odt_skims['WLK_TRN_IVT']>0) & (dot_skims['WLK_TRN_IVT']>0)"
#,walk_mix_available,"walk_transit_available & (odt_skims['WLK_TRN_IVT']>0) & (dot_skims['WLK_TRN_IVT']>0)"
#,pnr_local_available,"pnr_transit_available & (odt_skims['DRV_TRN_IVT']>0) & (dot_skims['DRV_TRN_IVT']>0)"
#,pnr_premium_available,"pnr_transit_available & (odt_skims['DRV_TRN_IVT']>0) & (dot_skims['DRV_TRN_IVT']>0)"
#,pnr_mix_available,"pnr_transit_available & (odt_skims['DRV_TRN_IVT']>0) & (dot_skims['DRV_TRN_IVT']>0)"
#,knr_local_available,"pnr_transit_available & (odt_skims['DRV_TRN_IVT']>0) & (dot_skims['DRV_TRN_IVT']>0)"
#,knr_premium_available,"pnr_transit_available & (odt_skims['DRV_TRN_IVT']>0) & (dot_skims['DRV_TRN_IVT']>0)"
#,knr_mix_available,"pnr_transit_available & (odt_skims['DRV_TRN_IVT']>0) & (dot_skims['DRV_TRN_IVT']>0)"
#,,
destination in central business district,destination_in_cbd,"(reindex(land_use.AREA_TYPE, df[dest_col_name]) == 1)"
#,,FIXME diagnostic
#,sov_dist_rt,(odt_skims['SOV_DIST'] + dot_skims['SOV_DIST'])
