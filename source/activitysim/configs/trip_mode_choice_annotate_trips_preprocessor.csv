Description,Target,Expression
,is_joint,(df.number_of_participants > 1)
,is_indiv,(df.number_of_participants == 1)
,is_atwork_subtour,~df.parent_tour_id.isnull()
,is_school,"(df.primary_purpose=='school') & (df.purpose.isin(['school', 'home']))"
,c_cost,(0.60 * coef_ivt) / df.value_of_time
,ivot,1.0/ df.value_of_time
#,,
#Auto operating costs,,
,parent_tour_veh,"reindex(tours['selected_vehicle'], df['parent_tour_id']) if 'selected_vehicle' in df.columns else np.nan"
,sov_veh_option,"np.where(is_atwork_subtour, parent_tour_veh, df.get('vehicle_occup_1', np.nan)) if 'selected_vehicle' in df.columns else np.nan"
,sr2_veh_option,"np.where(is_atwork_subtour, parent_tour_veh, df.get('vehicle_occup_2', np.nan)) if 'selected_vehicle' in df.columns else np.nan"
,sr3p_veh_option,"np.where(is_atwork_subtour, parent_tour_veh, df.get('vehicle_occup_3.5', np.nan)) if 'selected_vehicle' in df.columns else np.nan"
,sov_auto_op_cost,"reindex(vehicles.groupby('vehicle_type')['auto_operating_cost'].mean(), pd.Series(sov_veh_option, df.index)) if 'vehicle_occup_1' in df.columns else np.nan"
,sov_auto_op_cost,"np.where(sov_auto_op_cost.isna() | (pd.Series(sov_veh_option, df.index) == 'non_hh_veh'), costPerMile, sov_auto_op_cost)"
,s2_auto_op_cost,"reindex(vehicles.groupby('vehicle_type')['auto_operating_cost'].mean(), pd.Series(sr2_veh_option, df.index)) if 'vehicle_occup_2' in df.columns else np.nan"
,s2_auto_op_cost,"np.where(s2_auto_op_cost.isna() | (pd.Series(sr2_veh_option, df.index) == 'non_hh_veh'), costPerMile, s2_auto_op_cost)"
,s3_auto_op_cost,"reindex(vehicles.groupby('vehicle_type')['auto_operating_cost'].mean(), pd.Series(sr3p_veh_option, df.index)) if 'vehicle_occup_3.5' in df.columns else np.nan"
,s3_auto_op_cost,"np.where(s3_auto_op_cost.isna() | (pd.Series(sr3p_veh_option, df.index) == 'non_hh_veh'), costPerMile, s3_auto_op_cost)"
#,,,
,vot_da,c_ivt / c_cost * 0.6
,vot_s2,vot_da / cost_share_s2
,vot_s3,vot_da / cost_share_s3
,_vot_bin_da,"np.where(vot_da < vot_threshold_low, 1, np.where(vot_da < vot_threshold_med, 2, 3))"
,_vot_bin_s2,"np.where(vot_s2 < vot_threshold_low, 1, np.where(vot_s2 < vot_threshold_med, 2, 3))"
,_vot_bin_s3,"np.where(vot_s3 < vot_threshold_low, 1, np.where(vot_s3 < vot_threshold_med, 2, 3))"
#,,
#atwork subtours,,
#FIXME tripModeChoice uec wrongly conflates these with tour_mode_is_bike?,,
,parent_tour_mode,"reindex(tours.tour_mode, df.parent_tour_id).fillna('')"
,work_tour_is_SOV,parent_tour_mode.isin(['DRIVEALONE'])
,work_tour_is_bike,parent_tour_mode=='BIKE'
#,,
,i_tour_mode,df.tour_mode.map(I_MODE_MAP)
,tour_mode_is_SOV,i_tour_mode.isin(I_SOV_MODES)
,tour_mode_is_sr2,i_tour_mode.isin(I_SR2_MODES)
,tour_mode_is_sr3p,i_tour_mode.isin(I_SR3P_MODES)
,tour_mode_is_walk,i_tour_mode.isin([I_WALK_MODE])
,tour_mode_is_bike,i_tour_mode.isin([I_BIKE_MODE])
,tour_mode_is_walk_transit,i_tour_mode.isin(I_WALK_TRANSIT_MODES)
,tour_mode_is_drive_transit,i_tour_mode.isin(I_DRIVE_TRANSIT_MODES)
,tour_mode_not_drive_transit,~tour_mode_is_drive_transit
,tour_mode_is_school_bus,i_tour_mode.isin(I_SCHOOLBUS_MODE)
,tour_mode_is_ride_hail,i_tour_mode.isin(I_RIDE_HAIL_MODES)
#,,
,inbound,~df.outbound
,first_trip,df.trip_num == 1
,last_trip,df.trip_num == df.trip_count
origin terminal time not counted at home,_origin_terminal_time,"np.where(df.outbound & first_trip, 0, reindex(land_use.TERM_TIME, df[ORIGIN]))"
dest terminal time not counted at home,_dest_terminal_time,"np.where(inbound & last_trip, 0, reindex(land_use.TERM_TIME, df[DESTINATION]))"
,total_terminal_time,_origin_terminal_time + _dest_terminal_time
#,,
,free_parking_available,(df.tour_type == 'work') & df.free_parking_at_work
,dest_hourly_peak_parking_cost,"reindex(land_use.PARK_COST, df[DESTINATION])"
,origin_hourly_peak_parking_cost,"reindex(land_use.NONWRKPRK, df[ORIGIN])"
,origin_duration,"np.where(first_trip, np.where(inbound,df.duration/2 * ~free_parking_available,0), 1)"
,dest_duration,"np.where(last_trip, np.where(inbound, df.duration/2 * ~free_parking_available, 0), 1)"
# ,origin_parking_cost,origin_duration*origin_hourly_peak_parking_cost
# ,dest_parking_cost,dest_duration*dest_hourly_peak_parking_cost
,origin_parking_cost,origin_hourly_peak_parking_cost * 100.0
,dest_parking_cost,dest_hourly_peak_parking_cost * 100.0
,total_parking_cost,(origin_parking_cost + dest_parking_cost) / 2.0
#,trip_topology,"np.where(df.outbound, reindex(land_use.TOPOLOGY, df[DESTINATION]), reindex(land_use.TOPOLOGY, df[ORIGIN]))"
,trip_topology,1
,density_index,"np.where(df.outbound, reindex(land_use.density_index, df[DESTINATION]), reindex(land_use.density_index, df[ORIGIN]))"
,origin_density_index,"np.where(df.outbound, reindex(land_use.density_index, df[ORIGIN]), reindex(land_use.density_index, df[DESTINATION]))"
# FIXME no transit subzones so all zones short walk to transit,,
,_walk_transit_origin,True
,_walk_transit_destination,True
,walk_transit_available,_walk_transit_origin & _walk_transit_destination
,drive_transit_available,tour_mode_is_drive_transit
#,knr_transit_available,tour_mode_is_knr_transit
,origin_walk_time,shortWalk*60/walkSpeed
,destination_walk_time,shortWalk*60/walkSpeed
# RIDEHAIL,,
,origin_density_measure,"(reindex(land_use.POPULATION, df[orig_col_name]) + reindex(land_use.TOT_EMP, df[orig_col_name])) / (reindex(land_use.AREA, df[orig_col_name]) / 640)"
,origin_density,"pd.cut(origin_density_measure, bins=[-np.inf, 500, 2000, 5000, 15000, np.inf], labels=[5, 4, 3, 2, 1]).astype(int)"
,origin_zone_taxi_wait_time_mean,"origin_density.map({k: v for k, v in Taxi_waitTime_mean.items()})"
,origin_zone_taxi_wait_time_sd,"origin_density.map({k: v for k, v in Taxi_waitTime_sd.items()})"
# ,, Note that the mean and standard deviation are not the values for the distribution itself
,origTaxiWaitTime,"rng.lognormal_for_df(df, mu=origin_zone_taxi_wait_time_mean, sigma=origin_zone_taxi_wait_time_sd, broadcast=True, scale=True).clip(min_waitTime, max_waitTime)"
,origin_zone_singleTNC_wait_time_mean,"origin_density.map({k: v for k, v in TNC_single_waitTime_mean.items()})"
,origin_zone_singleTNC_wait_time_sd,"origin_density.map({k: v for k, v in TNC_single_waitTime_sd.items()})"
,origSingleTNCWaitTime,"rng.lognormal_for_df(df, mu=origin_zone_singleTNC_wait_time_mean, sigma=origin_zone_singleTNC_wait_time_sd, broadcast=True, scale=True).clip(min_waitTime, max_waitTime)"
,origin_zone_sharedTNC_wait_time_mean,"origin_density.map({k: v for k, v in TNC_shared_waitTime_mean.items()})"
,origin_zone_sharedTNC_wait_time_sd,"origin_density.map({k: v for k, v in TNC_shared_waitTime_sd.items()})"
,origSharedTNCWaitTime,"rng.lognormal_for_df(df, mu=origin_zone_sharedTNC_wait_time_mean, sigma=origin_zone_sharedTNC_wait_time_sd, broadcast=True, scale=True).clip(min_waitTime, max_waitTime)"
#,,
,sov_available,(odt_skims['SOV_N_TIME']>0) #& tour_mode_not_drive_transit
,hov2_available,(odt_skims['HOV2_N_TIME']>0) #& tour_mode_not_drive_transit
,hov3_available,(odt_skims['HOV3_N_TIME']>0) #& tour_mode_not_drive_transit
,walk_local_available,walk_transit_available & (odt_skims['WLK_TRN_IVT']>0)
,walk_premium_available,walk_transit_available & (odt_skims['WLK_TRN_IVT']>0)
,walk_mix_available,walk_transit_available & (odt_skims['WLK_TRN_IVT']>0)
,drive_transit_available_outbound,drive_transit_available & df.outbound & (odt_skims['DRV_TRN_IVT']>0)
,drive_transit_available_inbound,drive_transit_available & ~df.outbound & (odt_skims['DRV_TRN_IVT']>0)
#,pnr_premium_available_outbound,pnr_transit_available & df.outbound & (odt_skims['DRV_TRN_IVT']>0)
#,pnr_premium_available_inbound,pnr_transit_available & ~df.outbound & (odt_skims['DRV_TRN_IVT']>0)
#,pnr_mix_available_outbound,pnr_transit_available & df.outbound & (odt_skims['DRV_TRN_IVT']>0)
#,pnr_mix_available_inbound,pnr_transit_available & ~df.outbound & (odt_skims['DRV_TRN_IVT']>0)
#,knr_local_available_outbound,knr_transit_available & df.outbound & (odt_skims['DRV_TRN_IVT']>0)
#,knr_local_available_inbound,knr_transit_available & ~df.outbound & (odt_skims['DRV_TRN_IVT']>0)
#,knr_premium_available_outbound,knr_transit_available & df.outbound & (odt_skims['DRV_TRN_IVT']>0)
#,knr_premium_available_inbound,knr_transit_available & ~df.outbound &  (odt_skims['DRV_TRN_IVT']>0)
#,knr_mix_available_outbound,knr_transit_available & df.outbound & (odt_skims['DRV_TRN_IVT']>0)
#,knr_mix_available_inbound,knr_transit_available & ~df.outbound & (odt_skims['DRV_TRN_IVT']>0)
#,od_dist_walk,od_skims['DISTWALK']
#,do_dist_walk,od_skims.reverse('DISTWALK')
#,max_dist_walk,od_skims.max('DISTWALK')
#,dist_bike,od_skims['DISTBIKE']
#,dist_only,od_skims['DIST']
,ownsTransponder,df.transponder_ownership if 'transponder_ownership' in df else 0
,da_dist_skim,"(np.where(ownsTransponder==1, odt_skims['SOV_DIST_L'], odt_skims['SOV_DIST_L']) * (_vot_bin_da == 1)) + (np.where(ownsTransponder==1, odt_skims['SOV_DIST_M'], odt_skims['SOV_DIST_M']) * (_vot_bin_da == 2)) + (np.where(ownsTransponder==1, odt_skims['SOV_DIST_H'], odt_skims['SOV_DIST_H']) * (_vot_bin_da == 3))"
,da_cost_skim,"(np.where(ownsTransponder==1, odt_skims['SOV_P_TOLL_L'], odt_skims['SOV_N_TOLL_L']) * (_vot_bin_da == 1)) + (np.where(ownsTransponder==1, odt_skims['SOV_P_TOLL_M'], odt_skims['SOV_N_TOLL_M']) * (_vot_bin_da == 2)) + (np.where(ownsTransponder==1, odt_skims['SOV_P_TOLL_H'], odt_skims['SOV_N_TOLL_H']) * (_vot_bin_da == 3))"
,da_time_skim,"(np.where(ownsTransponder==1, odt_skims['SOV_P_TIME_L'], odt_skims['SOV_N_TIME_L']) * (_vot_bin_da == 1)) + (np.where(ownsTransponder==1, odt_skims['SOV_P_TIME_M'], odt_skims['SOV_N_TIME_M']) * (_vot_bin_da == 2)) + (np.where(ownsTransponder==1, odt_skims['SOV_P_TIME_H'], odt_skims['SOV_N_TIME_H']) * (_vot_bin_da == 3))"
,s2_dist_skim,(((odt_skims['HOV2_DIST_L']) * (_vot_bin_s2 == 1)) + ((odt_skims['HOV2_DIST_M']) * (_vot_bin_s2 == 2)) + ((odt_skims['HOV2_DIST_H']) * (_vot_bin_s2 == 3)))
,s2_cost_skim,"(np.where(ownsTransponder==1, odt_skims['HOV2_P_TOLL_L'], odt_skims['HOV2_N_TOLL_L']) * (_vot_bin_s2 == 1)) + (np.where(ownsTransponder==1, odt_skims['HOV2_P_TOLL_M'], odt_skims['HOV2_N_TOLL_M']) * (_vot_bin_s2 == 2)) + (np.where(ownsTransponder==1, odt_skims['HOV2_P_TOLL_H'], odt_skims['HOV2_N_TOLL_H']) * (_vot_bin_s2 == 3))"
,s2_time_skim,"(np.where(ownsTransponder==1, odt_skims['HOV2_P_TIME_L'], odt_skims['HOV2_N_TIME_L']) * (_vot_bin_s2 == 1)) + (np.where(ownsTransponder==1, odt_skims['HOV2_P_TIME_M'], odt_skims['HOV2_N_TIME_M']) * (_vot_bin_s2 == 2)) + (np.where(ownsTransponder==1, odt_skims['HOV2_P_TIME_H'], odt_skims['HOV2_N_TIME_H']) * (_vot_bin_s2 == 3))"
,s3_dist_skim,(((odt_skims['HOV3_DIST_L']) * (_vot_bin_s2 == 1)) + ((odt_skims['HOV3_DIST_M']) * (_vot_bin_s3 == 2)) + ((odt_skims['HOV3_DIST_H']) * (_vot_bin_s2 == 3)))
,s3_cost_skim,"(np.where(ownsTransponder==1, odt_skims['HOV3_P_TOLL_L'], odt_skims['HOV3_N_TOLL_L']) * (_vot_bin_s3 == 1)) + (np.where(ownsTransponder==1, odt_skims['HOV3_P_TOLL_M'], odt_skims['HOV3_N_TOLL_M']) * (_vot_bin_s3 == 2)) + (np.where(ownsTransponder==1, odt_skims['HOV3_P_TOLL_H'], odt_skims['HOV3_N_TOLL_H']) * (_vot_bin_s3 == 3))"
,s3_time_skim,"(np.where(ownsTransponder==1, odt_skims['HOV3_P_TIME_L'], odt_skims['HOV3_N_TIME_L']) * (_vot_bin_s3 == 1)) + (np.where(ownsTransponder==1, odt_skims['HOV3_P_TIME_M'], odt_skims['HOV3_N_TIME_M']) * (_vot_bin_s3 == 2)) + (np.where(ownsTransponder==1, odt_skims['HOV3_P_TIME_H'], odt_skims['HOV3_N_TIME_H']) * (_vot_bin_s3 == 3))"
,sov_available,"(odt_skims['SOV_N_TIME_M']>0) & (df.age>=minimumAgeDA) * np.where(is_joint,0,1)"
,hov2_available,"(odt_skims['HOV2_N_TIME_M'])>0"
,hov3_available,"(odt_skims['HOV3_N_TIME_M']>0)"
,_income_exponent,"np.where(is_work, 0.6, 0.5)"
,cost_sensitivity,"np.maximum(df.income,1000).pow(_income_exponent)"
,walk_trn_ivt,(odt_skims['WLK_TRN_IVT_L'] * (_vot_bin_da == 1)) + (odt_skims['WLK_TRN_IVT_M'] * (_vot_bin_da == 2)) + (odt_skims['WLK_TRN_IVT_H'] * (_vot_bin_da == 3))
,walk_transit_available_out,(walk_trn_ivt>0)
,walk_trn_wait,(odt_skims['WLK_TRN_IWAIT_L'] * (_vot_bin_da == 1)) + (odt_skims['WLK_TRN_IWAIT_M'] * (_vot_bin_da == 2)) + (odt_skims['WLK_TRN_IWAIT_H'] * (_vot_bin_da == 3))
,walk_xfr_wait,(odt_skims['WLK_TRN_XWAIT_L'] * (_vot_bin_da == 1)) + (odt_skims['WLK_TRN_XWAIT_M'] * (_vot_bin_da == 2)) + (odt_skims['WLK_TRN_XWAIT_H'] * (_vot_bin_da == 3))
,walk_xfrs,(odt_skims['WLK_TRN_XFERS_L'] * (_vot_bin_da == 1)) + (odt_skims['WLK_TRN_XFERS_M'] * (_vot_bin_da == 2)) + (odt_skims['WLK_TRN_XFERS_H'] * (_vot_bin_da == 3))
,walk_access_time,(odt_skims['WLK_TRN_ACC_L'] * (_vot_bin_da == 1)) + (odt_skims['WLK_TRN_ACC_M'] * (_vot_bin_da == 2)) + (odt_skims['WLK_TRN_ACC_H'] * (_vot_bin_da == 3))
,walk_egress_time,(odt_skims['WLK_TRN_WLKEGR_L'] * (_vot_bin_da == 1)) + (odt_skims['WLK_TRN_WLKEGR_M'] * (_vot_bin_da == 2)) + (odt_skims['WLK_TRN_WLKEGR_H'] * (_vot_bin_da == 3))
,walk_xfr_walk_time,(odt_skims['WLK_TRN_WLKXFER_L'] * (_vot_bin_da == 1)) + (odt_skims['WLK_TRN_WLKXFER_M'] * (_vot_bin_da == 2)) + (odt_skims['WLK_TRN_WLKXFER_H'] * (_vot_bin_da == 3))
,walk_fare,(odt_skims['WLK_TRN_FARE_L'] * (_vot_bin_da == 1)) + (odt_skims['WLK_TRN_FARE_M'] * (_vot_bin_da == 2)) + (odt_skims['WLK_TRN_FARE_H'] * (_vot_bin_da == 3))
,drive_trn_ivt_out,(odt_skims['DRV_TRN_IVT_L'] * (_vot_bin_da == 1)) + (odt_skims['DRV_TRN_IVT_M'] * (_vot_bin_da == 2)) + (odt_skims['DRV_TRN_IVT_H'] * (_vot_bin_da == 3))
,drive_transit_available_out,(drive_trn_ivt_out>0)
,drive_trn_wait_out,(odt_skims['DRV_TRN_IWAIT_L'] * (_vot_bin_da == 1)) + (odt_skims['DRV_TRN_IWAIT_M'] * (_vot_bin_da == 2)) + (odt_skims['DRV_TRN_IWAIT_H'] * (_vot_bin_da == 3))
,drive_xfr_wait_out,(odt_skims['DRV_TRN_XWAIT_L'] * (_vot_bin_da == 1)) + (odt_skims['DRV_TRN_XWAIT_M'] * (_vot_bin_da == 2)) + (odt_skims['DRV_TRN_XWAIT_H'] * (_vot_bin_da == 3))
,drive_xfrs_out,(odt_skims['DRV_TRN_XFERS_L'] * (_vot_bin_da == 1)) + (odt_skims['DRV_TRN_XFERS_M'] * (_vot_bin_da == 2)) + (odt_skims['DRV_TRN_XFERS_H'] * (_vot_bin_da == 3))
,drive_access_time_out,(odt_skims['DRV_TRN_DRACC_L'] * (_vot_bin_da == 1)) + (odt_skims['DRV_TRN_DRACC_M'] * (_vot_bin_da == 2)) + (odt_skims['DRV_TRN_DRACC_H'] * (_vot_bin_da == 3))
,drive_egress_time_out,(odt_skims['DRV_TRN_WLKEGR_L'] * (_vot_bin_da == 1)) + (odt_skims['DRV_TRN_WLKEGR_M'] * (_vot_bin_da == 2)) + (odt_skims['DRV_TRN_WLKEGR_H'] * (_vot_bin_da == 3))
,drive_xfr_walk_time_out,(odt_skims['DRV_TRN_WLKXFER_L'] * (_vot_bin_da == 1)) + (odt_skims['DRV_TRN_WLKXFER_M'] * (_vot_bin_da == 2)) + (odt_skims['DRV_TRN_WLKXFER_H'] * (_vot_bin_da == 3))
,drive_fare_out,(odt_skims['DRV_TRN_FARE_L'] * (_vot_bin_da == 1)) + (odt_skims['DRV_TRN_FARE_M'] * (_vot_bin_da == 2)) + (odt_skims['DRV_TRN_FARE_H'] * (_vot_bin_da == 3))
,drive_access_dist_out,(odt_skims['DRV_TRN_DRACCDIST_L'] * (_vot_bin_da == 1)) + (odt_skims['DRV_TRN_DRACCDIST_M'] * (_vot_bin_da == 2)) + (odt_skims['DRV_TRN_DRACCDIST_H'] * (_vot_bin_da == 3))
,drive_trn_ivt_in,(odt_skims['DRV_TRN_IVT_L'] * (_vot_bin_da == 1)) + (odt_skims['DRV_TRN_IVT_M'] * (_vot_bin_da == 2)) + (odt_skims['DRV_TRN_IVT_H'] * (_vot_bin_da == 3))
,drive_transit_available_in,(_drive_trn_ivt_in>0)
,drive_trn_wait_in,(odt_skims['DRV_TRN_IWAIT_L'] * (_vot_bin_da == 1)) + (odt_skims['DRV_TRN_IWAIT_M'] * (_vot_bin_da == 2)) + (odt_skims['DRV_TRN_IWAIT_H'] * (_vot_bin_da == 3))
,drive_xfr_wait_in,(odt_skims['DRV_TRN_XWAIT_L'] * (_vot_bin_da == 1)) + (odt_skims['DRV_TRN_XWAIT_M'] * (_vot_bin_da == 2)) + (odt_skims['DRV_TRN_XWAIT_H'] * (_vot_bin_da == 3))
,drive_xfrs_in,(odt_skims['DRV_TRN_XFERS_L'] * (_vot_bin_da == 1)) + (odt_skims['DRV_TRN_XFERS_M'] * (_vot_bin_da == 2)) + (odt_skims['DRV_TRN_XFERS_H'] * (_vot_bin_da == 3))
,drive_access_time_in,(odt_skims['DRV_TRN_WLKEGR_L'] * (_vot_bin_da == 1)) + (odt_skims['DRV_TRN_WLKEGR_M'] * (_vot_bin_da == 2)) + (odt_skims['DRV_TRN_WLKEGR_H'] * (_vot_bin_da == 3))
,drive_egress_time_in,(odt_skims['DRV_TRN_DRACC_L'] * (_vot_bin_da == 1)) + (odt_skims['DRV_TRN_DRACC_M'] * (_vot_bin_da == 2)) + (odt_skims['DRV_TRN_DRACC_H'] * (_vot_bin_da == 3))
,drive_xfr_walk_time_in,(odt_skims['DRV_TRN_WLKXFER_L'] * (_vot_bin_da == 1)) + (odt_skims['DRV_TRN_WLKXFER_M'] * (_vot_bin_da == 2)) + (odt_skims['DRV_TRN_WLKXFER_H'] * (_vot_bin_da == 3))
,drive_fare_in,(odt_skims['DRV_TRN_FARE_L'] * (_vot_bin_da == 1)) + (odt_skims['DRV_TRN_FARE_M'] * (_vot_bin_da == 2)) + (odt_skims['DRV_TRN_FARE_H'] * (_vot_bin_da == 3))
,drive_access_dist_in,(odt_skims['DRV_TRN_DRACCDIST_L'] * (_vot_bin_da == 1)) + (odt_skims['DRV_TRN_DRACCDIST_M'] * (_vot_bin_da == 2)) + (odt_skims['DRV_TRN_DRACCDIST_H'] * (_vot_bin_da == 3))
