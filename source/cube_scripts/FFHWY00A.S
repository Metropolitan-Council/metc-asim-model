; Do not change filenames or add or remove FILEI/FILEO statements using an editor. Use Cube/Application Manager.
RUN PGM=HIGHWAY MSG='Skim Free Flow Network for period %TOD%'
;FIXME: setup for periods by Andrew for use with period nets
FILEI NETI = "%NETWORK_FOLDER%\HWY_NET_%TOD%.net"
;FILEO NETO = "%SCENARIO_DIR%\highway\temp_%PER%.net" INCLUDE=LW.GENCOST_L
;FILEI NETI = "%SCENARIO_DIR%\highway\ALL_NET.tmp"
;FILEO MATO[1] = "%SCENARIO_DIR%\HWY_SKIM.tmp",  changed by Dennis Farmer; this should have extenstion .skm to work and get copied in next script
FILEO MATO[1] = "%SCENARIO_DIR%\highway\HWY_SKIM_0_%PER%_%IC%.skm",
 MO=1-15, 
  NAME=daptime, daptoll, dantime, dantoll, dapdist, a2ptime, a2ptoll, a2ntime, a2ntoll, a2pdist, 
  a3ptime, a3ptoll, a3ntime, a3ntoll, a3pdist
  
DISTRIBUTEINTRASTEP ProcessID='Intrastep', ProcessList=1-%max_threads%

READ FILE = "%NETWORK_FOLDER%\%Assignment_Parameters%"
READ FILE = "%NETWORK_FOLDER%\%Assignment_Parameters%"

PHASE=LINKREAD

	; Initialize price array -------------------------------------------------
	ARRAY _PRICE_ARRAY = 500
	ARRAY _PRICE_INCREASE = 500

	; Set input variables ----------------------------------------------------
	T0 = LI.TIME
	;IF (LI.CAPACITY_%LPER%=0)
	;	T0 = 99999
	;ENDIF
	;C = LI.CAPACITY * %CAPFAC%
	;ALPHA = LI.ALPHA
	;BETA = LI.BETA
	LW.HOV = 0 ;LI.HOV
	LINKCLASS = LI.RCI
	DISTANCE = LI.DISTANCE

	LW.HOV_TIME_PNLTY = 0
	LW.TOLL_PRICE_SOV = 0
	LW.MNPASS_CODE = LI.MNPASS_CODE
	LW.MNPASS_PAY = LI.MNPASS_PAY
	IF (LW.MNPASS_PAY > 0)
		LW.TOLL_SOV = 25
		LW.HOV_TIME_PNLTY = HOV_TIME_PENALTY
	ENDIF

	LW.TOLL_HOV2 = LW.TOLL_PRICE_SOV
	LW.TOLL_HOV3 = LW.TOLL_PRICE_SOV

	IF (HWY_TOLLSETTING == 2)
		LW.TOLL_PRICE_HOV2 = 0
		LW.TOLL_PRICE_HOV3 = 0
	ENDIF

	IF (HWY_TOLLSETTING == 3)
		LW.TOLL_PRICE_HOV3 = 0
	ENDIF

	; Create an HOV lane group and a no truck lane group ---------------------
	IF (LI.HOV_NO_MNPASS > 0) ADDTOGROUP = 1
	IF (LI.MNPASS_CODE > 0 || LI.HOV_NO_MNPASS > 0) ADDTOGROUP = 2
	
	LW.PC_SOV_L = LI.TIME + (0.6 / VOT_INCOME_01) * (DISTANCE * AUTO_PER_MILE_COST + LW.TOLL_SOV)
	LW.PC_SOV_M = LI.TIME + (0.6 / VOT_INCOME_02) * (DISTANCE * AUTO_PER_MILE_COST + LW.TOLL_SOV)
	LW.PC_SOV_H = LI.TIME + (0.6 / VOT_INCOME_03) * (DISTANCE * AUTO_PER_MILE_COST + LW.TOLL_SOV)

	LW.PC_HOV2_L = LI.TIME + (0.6 / VOT_INCOME_01) * (DISTANCE * AUTO_PER_MILE_COST + LW.TOLL_HOV2 / HWY_HOV2OCC) + LW.HOV_TIME_PNLTY
	LW.PC_HOV2_M = LI.TIME + (0.6 / VOT_INCOME_02) * (DISTANCE * AUTO_PER_MILE_COST + LW.TOLL_HOV2 / HWY_HOV2OCC) + LW.HOV_TIME_PNLTY
	LW.PC_HOV2_H = LI.TIME + (0.6 / VOT_INCOME_03) * (DISTANCE * AUTO_PER_MILE_COST + LW.TOLL_HOV2 / HWY_HOV2OCC) + LW.HOV_TIME_PNLTY

	LW.PC_HOV3_L = LI.TIME + (0.6 / VOT_INCOME_01) * (DISTANCE * AUTO_PER_MILE_COST + LW.TOLL_HOV3 / HWY_HOV3OCC) + LW.HOV_TIME_PNLTY
	LW.PC_HOV3_M = LI.TIME + (0.6 / VOT_INCOME_02) * (DISTANCE * AUTO_PER_MILE_COST + LW.TOLL_HOV3 / HWY_HOV3OCC) + LW.HOV_TIME_PNLTY
	LW.PC_HOV3_H = LI.TIME + (0.6 / VOT_INCOME_03) * (DISTANCE * AUTO_PER_MILE_COST + LW.TOLL_HOV3 / HWY_HOV3OCC) + LW.HOV_TIME_PNLTY

	LW.PC_TRK = LI.TIME + (0.6 / VOT_TRK) * DISTANCE * TRUCK_PER_MILE_COST
	
ENDPHASE

PROCESS PHASE = ILOOP
	; SOV w/transponder
	PATHLOAD PATH = LW.PC_SOV_%IC%, CONSOLIDATE=T, EXCLUDEGRP = 1, 
		MW[101] = PATHTRACE(TIME), NOACCESS = 10000, 
		MW[102] = PATHTRACE(LW.TOLL_SOV), NOACCESS = 0,
		MW[105] = PATHTRACE(LI.DISTANCE), NOACCESS = 10000
	; SOV no transponder
	PATHLOAD PATH = LW.PC_SOV_%IC%, CONSOLIDATE=T, EXCLUDEGRP = 2, 
		MW[103] = PATHTRACE(TIME), NOACCESS = 10000,
		MW[104] = PATHTRACE(LW.TOLL_SOV), NOACCESS = 0	
;daptime, daptoll, dantime, dantoll, dapdist,

	; SR2
	PATHLOAD PATH = LW.PC_HOV2_%IC%, CONSOLIDATE=T,
		MW[106] = PATHTRACE(TIME), NOACCESS = 10000, 
		MW[107] = PATHTRACE(LW.TOLL_HOV2), NOACCESS = 0,
		MW[110] = PATHTRACE(LI.DISTANCE), NOACCESS = 10000
	MW[109] = MW[107]
	MW[108] = MW[106]
	
	; SR3
	PATHLOAD PATH = LW.PC_HOV3_%IC%, CONSOLIDATE=T,
		MW[111] = PATHTRACE(TIME), NOACCESS = 10000,
		MW[112] = PATHTRACE(LW.TOLL_HOV3), NOACCESS = 0,
		MW[115] = PATHTRACE(LI.DISTANCE), NOACCESS = 10000
	MW[113] = MW[111]
	MW[114] = MW[112]
	
	mw[1] = MW[101] 
    mw[2] = MW[102] 
    mw[3] = MW[1]
    mw[4] = MW[2]
    mw[5] = MW[105] 

    mw[1][I] = LOWEST(1,1,0.1,999,I)/2  
    mw[3][I] = LOWEST(3,1,0.1,999,I)/2      
    mw[5][I] = LOWEST(5,1,0.1,999,I)/2 
    
    ; SR2
    mw[6] = MW[106] 
    mw[7] = MW[107] 
    mw[8] = MW[6]
    mw[9] = MW[7]
    mw[10] = MW[110] 
    
	mw[6][I] = LOWEST(6,1,0.1,999,I)/2  
    mw[8][I] = LOWEST(8,1,0.1,999,I)/2      
    mw[10][I] = LOWEST(10,1,0.1,999,I)/2 
	
    ; SR3
    mw[11] = MW[111] 
    mw[12] = MW[112] 
    mw[13] = MW[11]
    mw[14] = MW[12]
    mw[15] = MW[115] 
	
	mw[11][I] = LOWEST(11,1,0.1,999,I)/2  
    mw[13][I] = LOWEST(13,1,0.1,999,I)/2      
    mw[15][I] = LOWEST(15,1,0.1,999,I)/2 
ENDPHASE

PROCESS PHASE=ADJUST
; Update generalized cost functions ---------------------------------------
		LW.PC_SOV_L = TIME + (0.6 / VOT_INCOME_01) * (DISTANCE * AUTO_PER_MILE_COST + LW.TOLL_SOV)
		LW.PC_SOV_M = TIME + (0.6 / VOT_INCOME_02) * (DISTANCE * AUTO_PER_MILE_COST + LW.TOLL_SOV)
		LW.PC_SOV_H = TIME + (0.6 / VOT_INCOME_03) * (DISTANCE * AUTO_PER_MILE_COST + LW.TOLL_SOV)

		LW.PC_HOV2_L = TIME + (0.6 / VOT_INCOME_01) * (DISTANCE * AUTO_PER_MILE_COST + LW.TOLL_HOV2 / HWY_HOV2OCC) + LW.HOV_TIME_PNLTY
		LW.PC_HOV2_M = TIME + (0.6 / VOT_INCOME_02) * (DISTANCE * AUTO_PER_MILE_COST + LW.TOLL_HOV2 / HWY_HOV2OCC) + LW.HOV_TIME_PNLTY
		LW.PC_HOV2_H = TIME + (0.6 / VOT_INCOME_03) * (DISTANCE * AUTO_PER_MILE_COST + LW.TOLL_HOV2 / HWY_HOV2OCC) + LW.HOV_TIME_PNLTY

		LW.PC_HOV3_L = TIME + (0.6 / VOT_INCOME_01) * (DISTANCE * AUTO_PER_MILE_COST + LW.TOLL_HOV3 / HWY_HOV3OCC) + LW.HOV_TIME_PNLTY
		LW.PC_HOV3_M = TIME + (0.6 / VOT_INCOME_02) * (DISTANCE * AUTO_PER_MILE_COST + LW.TOLL_HOV3 / HWY_HOV3OCC) + LW.HOV_TIME_PNLTY
		LW.PC_HOV3_H = TIME + (0.6 / VOT_INCOME_03) * (DISTANCE * AUTO_PER_MILE_COST + LW.TOLL_HOV3 / HWY_HOV3OCC) + LW.HOV_TIME_PNLTY

		LW.PC_TRK = TIME + (0.6 / VOT_TRK) * DISTANCE * TRUCK_PER_MILE_COST
ENDPROCESS

ENDRUN
